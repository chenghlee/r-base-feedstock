--- R-4.2.0-orig/configure.ac	2022-04-14 15:02:01.000000000 -0700
+++ R-4.2.0/configure.ac	2022-04-27 15:37:27.932889557 -0700
@@ -61,7 +61,7 @@
 ## AC_USE_SYSTEM_EXTENSIONS ....
 ## This sets _GNU_SOURCE, so glibc defines all its extensions
 ## (_POSIX_C_SOURCE, _XOPEN_SOURCE, _BSD_SOURCE, __USE_MISC) and these
-## unlock declarations of non-C99 functions and constants.  
+## unlock declarations of non-C99 functions and constants.
 ## Ditto for __EXTENSIONS__ on Solaris and _ALL_SOURCE on AIX.
 
 ### ** Platform.
@@ -84,10 +84,10 @@
    ## https://en.wikipedia.org/wiki/Darwin_OS
    darwin1.*)
      AC_MSG_ERROR([The earliest supported macOS is 10.6.]
-     ;; 
+     ;;
   darwin[[56789]]*)
      AC_MSG_ERROR([The earliest supported macOS is 10.6.]
-     ;; 
+     ;;
   aix[[123]]*|aix4.[[01]]*)
     ## These need a form of linking we no longer support
     AC_MSG_ERROR([AIX prior to 4.2 is not supported])
@@ -171,7 +171,7 @@
     ;;
   solaris*)
     ## libnn=lib/sparcv9 ## on 64-bit only, but that's compiler-specific
-    ;;  
+    ;;
 esac
 : ${LIBnn=$libnn}
 ## We provide these defaults so that headers and libraries in
@@ -303,7 +303,7 @@
 fi
 AM_CONDITIONAL(WANT_R_STATIC, [test "x${want_R_static}" = xyes])
 
-## Build separate shared/dynamic library containing R's BLAS if desired 
+## Build separate shared/dynamic library containing R's BLAS if desired
 AC_ARG_ENABLE([BLAS-shlib],
 [AS_HELP_STRING([--enable-BLAS-shlib],[build BLAS into a shared/dynamic library @<:@perhaps@:>@])],
 [use_blas_shlib="${enableval}"],
@@ -603,7 +603,7 @@
            [special flags for compiling C code to be turned into a
             shared object.])
 AC_ARG_VAR([FPICFLAGS],
-           [special flags for compiling Fortran code to be 
+           [special flags for compiling Fortran code to be
 	    turned into a shared object.])
 AC_ARG_VAR([SHLIB_LD],
            [command for linking shared objects which contain object
@@ -721,13 +721,13 @@
 AC_PATH_PROG(NOTANGLE, notangle, false)
 if test "${NOTANGLE}" = false ; then
   R_MNT_WARN([[notangle is missing - byte-code compiler source cannot be updated!]])
-  NOTANGLE=notangle    
+  NOTANGLE=notangle
 fi
 ## javareconf needs this
 AC_PATH_PROG(REALPATH, realpath, false)
 
 
-## Search for cairographics needs pkg-config, 
+## Search for cairographics needs pkg-config,
 ## helps find jpeg, libpng and libtiff.
 AC_PATH_PROGS(PKG_CONFIG, [ pkg-config pkgconf ], [])
 AC_ARG_VAR([PKG_CONFIG], [path to pkg-config (or pkgconf) utility])
@@ -806,15 +806,15 @@
 R_LD_LIBRARY_PATH_save=${R_LD_LIBRARY_PATH}
 R_LD_LIBRARY_PATH=
 case "${host_os}" in
-  darwin*)
-    ## Darwin provides a full path in the ID of each library such 
+  some_other_platform*)
+    ## Darwin provides a full path in the ID of each library such
     ## that the linker can add library's path to the binary at link time.
     ## This allows the dyld to find libraries even without xx_LIBRARY_PATH.
     ## No paths should be added to R_LD_LIBRARY_PATH (which in turn
     ## changes DYLD_LIBRARY_PATH), because they override the system
     ## look-up sequence. Such automatic override has proven to break things
     ## like system frameworks (e.g. ImageIO or OpenGL framework).
-    ## Not so bad in later versions of Darwin, 
+    ## Not so bad in later versions of Darwin,
     ## where DYLD_FALLBACK_LIBRARY_PATH is used (see below).
     ;;
   *)
@@ -882,7 +882,7 @@
   if test "${use_readline}" = no; then
     ## only need ncurses if libreadline is not statically linked against it
     unset ac_cv_lib_readline_rl_callback_read_char
-    AC_CHECK_LIB(ncurses, main, [],
+    AC_SEARCH_LIBS([initscr], [ncursesw curses], [],
                  AC_CHECK_LIB(tinfo, main, [],
                               AC_CHECK_LIB(termcap, main, [],
                                            AC_CHECK_LIB(termlib, main))))
@@ -903,7 +903,7 @@
     ## rl_completion_matches is >= 4.2 (emulation has it)
     ## rl_resize_terminal is >= 4.0 but we use it only for >= 6.3.
     ## rl_sort_completion_matches is >= 6.0 (not in emulation)
-    R_CHECK_FUNCS([rl_completion_matches rl_resize_terminal rl_sort_completion_matches], 
+    R_CHECK_FUNCS([rl_completion_matches rl_resize_terminal rl_sort_completion_matches],
 [#include <stdio.h>
 #include <readline/readline.h>]
                  )
@@ -1006,7 +1006,7 @@
 else
   cstack_dir=1
 fi
-AC_DEFINE_UNQUOTED([C_STACK_DIRECTION], ${cstack_dir}, 
+AC_DEFINE_UNQUOTED([C_STACK_DIRECTION], ${cstack_dir},
                     [C stack direction: 1 (down) or -1 (up)])
 
 
@@ -1021,7 +1021,7 @@
 [use_long_double=yes])
 
 dnl also used in intl.
-if test "x${use_long_double}" = xyes; then 
+if test "x${use_long_double}" = xyes; then
   AC_DEFINE(HAVE_LONG_DOUBLE, 1, [Define if you wish to use the 'long double' type.])
   AC_CHECK_SIZEOF(long double)
 else
@@ -1195,7 +1195,7 @@
 AC_MSG_RESULT([${fc_len_t}])
 
 if test "x${fc_len_t}" != "xunknown"; then
-   AC_DEFINE_UNQUOTED([FC_LEN_T], ${fc_len_t}, 
+   AC_DEFINE_UNQUOTED([FC_LEN_T], ${fc_len_t},
                       [C type used for Fortran character lengths])
 fi
 
@@ -1248,7 +1248,7 @@
 ##   instantiating templates, enabling exception support, etc.).
 ##
 ## The procedure is as follows.
-##   
+##
 ## * We use applicable values from imake in case its CC is ours.
 ## * Irrespective of that, we think we know what to do with GNU tools
 ##   (GNU C, Fortran, and C++ compilers).
@@ -1383,7 +1383,7 @@
     fi
     if test "${GXX}" = yes; then
       shlib_cxxldflags="-shared ${shlib_cxxldflags}"
-    fi 
+    fi
     ;;
   darwin*)
     darwin_pic="-fPIC"
@@ -1426,7 +1426,7 @@
        shlib_ldflags="-dynamiclib -flat_namespace -undefined suppress -single_module -multiply_defined suppress"
        dylib_undefined_allowed=yes
     fi
-	
+
     ## we use the same method for shlib and dylib now
     darwin_dylib_ldflags="${shlib_ldflags}"
     ## side note: we could use flat namespace instead, but there is an exception:
@@ -1543,14 +1543,14 @@
       main_ldflags="${wl}-export-dynamic"
       shlib_ldflags="-shared -fPIC"
     fi
-    case "${host_cpu}" in 
+    case "${host_cpu}" in
       powerpc*)
 	## GCC -fpic limits to 2**16 on OpenBSD powerpc.
 	## Error message without -fPIC:
 	##   relocation truncated to fit: R_PPC_GOT16...
         if test "${GCC}" = yes; then
           cpicflags="-fPIC"
-        fi  
+        fi
 	if test "${ac_cv_fc_compiler_gnu}" = yes; then
           fpicflags="-fPIC"
         fi
@@ -1581,7 +1581,7 @@
     else
       cpicflags="-KPIC"
       if test "`basename ${CXX}`" = "CC" ; then
-        ## Forte version 7 needs -lCstd: Forte 6 does not.	
+        ## Forte version 7 needs -lCstd: Forte 6 does not.
         ver=`${CXX} -V 2>&1 | sed 2d | grep 'Forte Developer 7 C++'`
         if test -n "${ver}" ; then
           shlib_cxxldflags="-G -lCstd"
@@ -1714,7 +1714,7 @@
   darwin*)
     DYLIB_EXT=".dylib"
     dylib_ldflags="${darwin_dylib_ldflags}"
-    MAJR_VERSION=`echo "${PACKAGE_VERSION}" | sed  -e "s/[[\.]][[1-9]]$/.0/"` 
+    MAJR_VERSION=`echo "${PACKAGE_VERSION}" | sed  -e "s/[[\.]][[1-9]]$/.0/"`
     LIBR_LDFLAGS="-install_name libR.dylib -compatibility_version ${MAJR_VERSION}  -current_version ${PACKAGE_VERSION}  -headerpad_max_install_names"
     RLAPACK_LDFLAGS="-install_name libRlapack.dylib -compatibility_version ${MAJR_VERSION} -current_version ${PACKAGE_VERSION}  -headerpad_max_install_names"
     ## don't use version in libRblas so we can replace it with any BLAS implementation
@@ -1831,7 +1831,7 @@
 ##
 ## For compiling R itself, we use MAIN_LD and DYLIB_LD for linking, both
 ## defaulting to CC.  Hence:
-## 
+##
 ##    If both MAIN_LD and DYLIB_LD were not specified by the user and
 ##    equal CC and this was determined to support OpenMP, then we (try
 ##    to) provide OpenMP support by adding OPENMP_CFLAGS to the linker
@@ -1854,7 +1854,7 @@
   R_SH_VAR_ADD(DYLIB_LDFLAGS, [${OPENMP_CFLAGS}])
   AC_DEFINE(HAVE_OPENMP, 1, [Define if you have C OpenMP support.])
 else
-  R_OPENMP_CFLAGS= 
+  R_OPENMP_CFLAGS=
 fi
 ## Currently unused: see comment in Makeconf.in
 if test -z "${R_OPENMP_FFLAGS+set}" -a \
@@ -1902,12 +1902,12 @@
 
 AC_CHECK_TYPES([off_t])
 AC_FUNC_ALLOCA
-AC_CHECK_DECLS([alloca], , , 
+AC_CHECK_DECLS([alloca], , ,
 [#ifdef HAVE_ALLOCA_H
 # include <alloca.h>
 #endif])
 
-## C99 functions: 
+## C99 functions:
 ## not all C99 runtimes are complete,
 ## but we had substitutes for expm1 hypot log1p and (internally) nearbyint[l]
 ## FreeBSD used to lack log1pl, but 6.0 had it
@@ -1948,7 +1948,7 @@
 ## For now, do not define _GNU_SOURCE here.
 ## All but pown have long been in Solaris' libsunmath
 ## macOS has __cospi __sinpi __tanpi
-AC_CHECK_FUNCS([atanpi atan2pi cospi exp10 pown sinpi tanpi __cospi __sinpi __tanpi], 
+AC_CHECK_FUNCS([atanpi atan2pi cospi exp10 pown sinpi tanpi __cospi __sinpi __tanpi],
 [#define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
 #include <math.h>
 #ifdef HAVE_SUNMATH_H
@@ -1969,7 +1969,7 @@
    AC_MSG_ERROR([Building R requires the 'popen' system call])
 fi
 R_CHECK_FUNCS([getline], [#include <stdio.h>])
-R_CHECK_FUNCS([select], 
+R_CHECK_FUNCS([select],
 [#ifdef HAVE_SYS_SELECT_H
 #include <sys/select.h>  /* POSIX >= 2001 */
 #endif
@@ -2018,7 +2018,7 @@
 AC_SUBST(MACOS_SIERRA)
 ## clock_gettime is POSIX 1993, but not on macOS prior to 10.12 (Sierra)
 ## Some OSes need -lrt: Linux (for glibc versions before 2.17), Solaris,
-## not FreeBSD. 
+## not FreeBSD.
 ## Unsurprising, as POSIX 2008 moved it from its timers section to base.
 AC_CHECK_LIB(rt, clock_gettime)
 R_CHECK_FUNCS([clock_gettime], [#include <time.h>])
@@ -2096,7 +2096,7 @@
 
 if test $ac_cv_type_off_t=yes -a $ac_cv_func_fseeko=yes -a $ac_cv_func_ftello=yes; then
    AC_DEFINE(HAVE_OFF_T, 1,
-            [Define if you have off_t, fseeko and ftello.]) 
+            [Define if you have off_t, fseeko and ftello.])
 fi
 
 ## IEEE 754. We rely on this in e.g. the working log test.
@@ -2137,7 +2137,7 @@
 R_FUNC_ISFINITE
 fi
 ## check accuracy of log1p
-## issues are probably ancient history: 
+## issues are probably ancient history:
 ## reported for NetBSD 1.6 and OpenBSD 3.2 (both 2002).
 R_FUNC_LOG1P
 R_FUNC_FTELL
@@ -2147,7 +2147,7 @@
 case "${host_os}" in
    darwin*)
      use_internal_tzcode=yes;
-     ;; 
+     ;;
 esac
 fi
 if test "${use_internal_tzcode}" != yes; then
@@ -2159,13 +2159,13 @@
 case "${host_os}" in
    darwin*)
      use_internal_iswxxxxx=yes;
-     ;; 
+     ;;
    aix*)
      use_internal_iswxxxxx=yes;
-     ;; 
+     ;;
    solaris*)
      use_internal_iswxxxxx=yes;
-     ;; 
+     ;;
 esac
 fi
 if test x${use_internal_iswxxxxx} = xyes; then
@@ -2180,10 +2180,10 @@
 case "${host_os}" in
    darwin*)
      use_internal_towlower=yes;
-     ;; 
+     ;;
    solaris*)
      use_internal_towlower=yes;
-     ;; 
+     ;;
 esac
 fi
 if test x${use_internal_towlower} = xyes; then
@@ -2479,7 +2479,7 @@
 
 ## stat times
 gl_STAT_TIME
- 
+
 ## R profiling.
 if test "${want_R_profiling}" = yes; then
   AC_CHECK_FUNCS(setitimer,
@@ -2520,7 +2520,7 @@
 ## check for visible __libc_stack_end on Linux
 case "${host_os}" in
   linux*)
-    AC_CACHE_CHECK([for visible __lib_stack_end], 
+    AC_CACHE_CHECK([for visible __lib_stack_end],
     [r_cv_libc_stack_end],
     [AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include "confdefs.h"
@@ -2532,7 +2532,7 @@
     if(!__libc_stack_end) exit(1);
     exit(0);
 }
-  ]])], [r_cv_libc_stack_end=yes], [r_cv_libc_stack_end=no], 
+  ]])], [r_cv_libc_stack_end=yes], [r_cv_libc_stack_end=no],
     [r_cv_libc_stack_end=no])])
 
   if test "${r_cv_libc_stack_end}" = yes; then
@@ -2697,7 +2697,7 @@
 if test -n "${R_LD_LIBRARY_PATH_save}"; then
   R_LD_LIBRARY_PATH=${R_LD_LIBRARY_PATH_save}
 else
-## We already added -L's from LDFLAGS (except on Darwin): 
+## We already added -L's from LDFLAGS (except on Darwin):
 ## seem to be doing it again
 for arg in ${LDFLAGS} ${FLIBS} ${BLAS_LIBS} ${LAPACK_LIBS} ${X_LIBS} \
            ${TCLTK_LIBS}; do
@@ -2778,7 +2778,7 @@
     AC_DEFINE(HAVE_PNG, 1, [Define if you have the PNG headers and libraries.])
     AC_DEFINE(HAVE_POSIX_SETJMP, 1, [Define if you have POSIX.1 compatible
                                      sigsetjmp/siglongjmp.])
-    AC_DEFINE(HAVE_TCLTK, 1, [Define if you have the Tcl/Tk headers and 
+    AC_DEFINE(HAVE_TCLTK, 1, [Define if you have the Tcl/Tk headers and
                               libraries and want Tcl/Tk support to be built.] )
     AC_DEFINE(HAVE_TIFF, 1, [Define this if libtiff is available.])
     AC_DEFINE(HAVE_TIMES, 1, [Define to 1 if you have the `times' function.])
@@ -2802,7 +2802,7 @@
   etc/javaconf
   etc/ldpaths
   m4/Makefile
-  po/Makefile 
+  po/Makefile
   share/Makefile
   src/Makefile
   src/appl/Makefile
@@ -3051,7 +3051,7 @@
   Capabilities skipped:        ${r_no_capabilities}
   Options not enabled:         ${r_no_options}
 
-  Recommended packages:        ${use_recommended_packages} 
+  Recommended packages:        ${use_recommended_packages}
 ])
 if test -n "${warn_f77_cc_double_complex}"; then
   AC_MSG_WARN([${warn_f77_cc_double_complex}])
